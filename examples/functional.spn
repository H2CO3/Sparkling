#!/usr/bin/env spn

# demonstrating the functional capabilities of Sparkling using
# higher-order functions, closures, partial application, etc.

let flip = fn f -> fn -> f.call($.reverse());
let lessThan = fn a b -> a < b;

let greaterThan = flip(lessThan);
let a = 13, b = 37;

stdout.printf("%d < %d -> %B\n", a, b, lessThan(a, b));
stdout.printf("%d > %d -> %B\n", a, b, greaterThan(a, b));

# takes a function 'f' and returns a new function which calls 'f'
# with the rest of the arguments of 'partial()' and its own arguments.
fn partial (f) {
	let rest = $.slice(1);
	return fn -> f.call(rest.concat($));
}

let adder = fn -> $.reduce(0, fn a b -> a + b);

let addsix = partial(adder, 1, 2, 3);

print("(1 + 2 + 3) + (4 + 5 + 6 + 7) = ", addsix(4, 5, 6, 7));

# The Maybe monad
# 'Maybe' is the 'return()' or 'unit()' function itself
# (just a constructor)

fn Maybe (val) {
	return {
		// 'lift()' is more convenient than 'bind()'
		// (but here, it's only used because Sparkling's
		// type system already has the expressive power of Maybe.
		// If we didn't have 'nil' in the language, we would
		// _have to_ use 'bind()'.
		lift: fn self f -> self.bind(fn arg -> Maybe(f(arg))),
		bind: fn (self, f) {
			if self["value"] == nil {
				return self;
			}

			return f(self["value"]);
		},
		value: val
	};
}

# Some sample data: my family tree... or something like that.
# 'Maybe' is the classic example of looking up stuff in an
# associative container, since it's possible that a key
# simply does not exist in which case we get 'nil'.
let me = {
	name: "Arpad",
	age: 20,
	mom: {
		name: "N...",
		mom: {
			name: "I...",
			age: 75
		},
		dad: {
			name: "K..."
		},
		siblings: []
	},
	dad: {
		name: "F...",
		age: 37,
		mom: {
			name: "H..."
		},
		dad: {
			name: "K...",
			age: 56
		},
		siblings: [
			{
				name: "K...",
				age: 29
			}
		]
	},
	siblings: [
		{
			name: "J...",
			age: 7
		}
	]
};

let Me = Maybe(me);

# helper function for indexing objects
let getter = fn index -> fn obj -> obj[index];

# Find my grandma's age
let grandmaAge = Me.lift(
	getter("mom")
).lift(
	getter("mom")
).lift(
	getter("age")
);

# Find the age of my mom's cousin.
# But there's no such person in the tree...!
let momsCousinAge = Me.lift(
	getter("mom")
).lift(
	getter("cousin")
).lift(
	getter("age")
);

print("Grandma's age: ", grandmaAge["value"]);
print("Mom's cousin's age: ", momsCousinAge["value"]);
