#!/usr/bin/env spn

/* Complex number demo for Sparkling
 * Also happens to demonstrate how to create and use classes
 *
 * Created by H2CO3 on 30/12/2013
 */

var class = {};

// Constructor for complex numbers
let Cplx = fn (self) {
	self["super"] = class;
	return self;
};

class["cfmt"] = fn (self) {
	return "(%.3f %+.3fi)".format(self.re, self.im);
};

class["pfmt"] = fn (self) {
	let r = self.r;
	let theta = self.theta;
	return "%.3f * (cos %.3f + i sin %.3f)".format(r, theta, theta);
};

class["add"] = fn (self, z) {
	return Cplx(cplx_add(self, z));
};

class["sub"] = fn (self, z) {
	return Cplx(cplx_sub(self, z));
};

class["mul"] = fn (self, z) {
	return Cplx(cplx_mul(self, z));
};

class["div"] = fn (self, z) {
	return Cplx(cplx_div(self, z));
};

class["conj"] = fn (self) {
	return Cplx(cplx_conj(self));
};

class["toCartesian"] = fn (self) {
	return Cplx(pol2can(self));
};

class["toPolar"] = fn (self) {
	return Cplx(can2pol(self));
};

var z1 = Cplx({ re: 1, im: -1 });
var z2 = Cplx({ re: 2, im:  3 });
var z3 = Cplx({ r:  2, theta: M_PI / 3 });

stdout.printf("%s + %s = %s\n", z1.cfmt(), z2.cfmt(), z1.add(z2).cfmt());
stdout.printf("%s - %s = %s\n", z1.cfmt(), z2.cfmt(), z1.sub(z2).cfmt());
stdout.printf("%s * %s = %s\n", z1.cfmt(), z2.cfmt(), z1.mul(z2).cfmt());
stdout.printf("%s / %s = %s\n", z1.cfmt(), z2.cfmt(), z1.div(z2).cfmt());

stdout.printf("conj %s = %s\n", z1.cfmt(), z1.conj().cfmt());

stdout.printf("%s in trigonometric form: %s\n", z2.cfmt(), z2.toPolar().pfmt());
stdout.printf("%s in canonical form: %s\n", z3.pfmt(), z3.toCartesian().cfmt());
