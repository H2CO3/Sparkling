More or less formal definition of the grammar of the Sparkling language.
Any syntactical or semantical errors in the grammar and all the deviations from
the (theoretically correct) reference implementation are unintentional.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Grammar notations:

- Specifying a production (precedence level 0, lowest):

	production = rule

- Listing compulsory, successive parts of a rule (precedence level 1):

	part1 part2 part3 ... partN

- Providing multiple (alternative) choices (precedence level 2):

	rule1 | rule2 | rule3 | ... | ruleN

- Quantifiers:

	? -- 0 or 1 ("optional")
	* -- 0 or more ("optional, may be repeated")
	+ -- 1 or more ("obligatory, may be repeated")

- Optional language construct - zero or one occurrence (acts as grouping, too -> precedence level 3):

	[ rules... ]

- Optional language construct - zero or more occurrences (acts as grouping, too -> precedence level 3):

	{ rules... }

- Grouping without side effects ("parenthesizing"; precedence level 3):

	( rules... )

- Literal strings (terminals):

	'string'

- Other terminals:

	IN-ALL-CAPS

The language ignores whitespace between tokens (terminals). Comments are treated
as whitespace (they're ignored). One-line comments begin with '//' or '#',
whereas block comments are enclosed between '/*' and '*/' and they don't nest.

T h e   g r a m m a r
~~~~~~~~~~~~~~~~~~~~~

program				= ( statement | extern-statement )(*)

argument-declaration-list = old-style-argument-declaration-list
                          | new-style-argument-declaration-list

old-style-declaration-argument-list = '(' ( IDENT ( ',' IDENT )(*) )(?) ')'
new-style-declaration-argument-list = IDENT *

statement = empty-statement              |
            function-statement           |
            if-statement                 |
            for-statement                |
            while-statement              |
            do-while-statement           |
            return-statement             |
            loop-control-flow-statement  |
            expression-statement         |
            block-statement              |
            variable-declaration

extern-statement    = 'extern' IDENT '=' expression ( ',' IDENT '=' expression )(*) ';'

empty-statement     = ';'

function-statement  = 'fn' IDENT argument-declaration-list block-statement

if-statement        = 'if' expression block-statement ( 'else' block-statement | if-statement )(?)

for-statement       = 'for' for-header | ( '(' for-header ')' ) block-statement
for-header          = ( variable-declaration | expression ';' ) expression ';' expression

while-statement     = 'while' expression block-statement

do-while-statement  = 'do' block-statement 'while' expression ';'

return-statement    = 'return' [ expression ] ';'

block-statement     = '{' statement (*) '}'

loop-control-flow-statement = ( 'break' | 'continue' ) [ ';' ]

variable-declaration  = 'let' IDENT [ '=' expression ] ( ',' IDENT [ '=' expression ] )(*) ';'

expression-statement  = expression ';'

expression            = assignment-expr

assignment-expr       = concat-expr [
                      (  '=' |
                        '+=' |
                        '-=' |
                        '*=' |
                        '/=' |
                        '%=' |
                        '|=' |
                        '&=' |
                        '^=' |
                       '<<=' |
                       '>>=' )
                        assignment-expr ] /* right-assoc */

concat-expr           = [ concat-expr '..' ] cond-expr /* left-assoc */

cond-expr             = logical-or-expr [ '?' expression ':' cond-expr ] /* right-assoc */

logical-or-expr       = [ logical-or-expr '||' | 'or' ] logical-and-expr /* left-assoc */

logical-and-expr      = [ logical-and-expr '&&' | 'and' ] comparison-expr /* left-assoc */

comparison-expr       = bitwise-or-expr [ '<' | '>' | '<=' | '>=' | '==' | '!=' bitwise-or-expr ] /* no-assoc */

bitwise-or-expr       = [ bitwise-or-expr '|' ] bitwise-xor-expr /* left assoc */

bitwise-xor-expr      = [ bitwise-xor-expr '^' ] bitwise-and-expr /* left assoc */

bitwise-and-expr      = [ bitwise-and-expr '&' ] shift-expr /* left assoc */

shift-expr            = [ shift-expr '<<' | '>>' ] additive-expr /* left assoc */

additive-expr         = [ additive-expr '+' | '-' ] multiplicative-expr /* left assoc */

multiplicative-expr   = [ multiplicative-expr '*' | '/' | '%' ] prefix-expr /* left-assoc */

prefix-expr           = (
                      ( '+'       |
                        '-'       |
                        '++'      |
                        '--'      |
                        '!'       |
                        'not'     |
                        '~'       )
                      prefix-expr ) | postfix-expr /* right-assoc */

postfix-expr = (
      postfix-expr [
          ( '[' expression ']' )              |
          ( '(' [ argument-call-list ] ')' )  |
          '++'                                |
          '--'                                |
          ( '.' IDENT )                       |
      ]
    ) | term /* left-assoc */

term         = IDENT                   |
               literal                 |
               '$'                     |
               ( '(' expression ')' )  |
               function-expr           |
               array-literal           |
               hashmap-literal

function-expr   = 'fn' argument-declaration-list function-body

function-body   = block-statement | '->' expression

array-literal   = '[' [ expression ( ',' expression )(*) [ ',' ] ] ']'

hashmap-literal = '{' [ key-val ( ',' key-val )(*) [ ',' ] ] '}'

key-val         = expression ':' expression

argument-call-list = ( expression ( ',' expression )(*) )(?)

literal  =   STRING   |
             INTEGER  |
             CHAR     |
             FLOAT    |
            'true'    |
            'false'   |
            'nil'

Reserved keywords
~~~~~~~~~~~~~~~~~

and         else       if         return
            extern     let        true
break       false      nil        while
continue    fn         not
do          for

The 'not', 'and' and 'or' keywords are equivalent with the '!', '&&' and '||'
tokens, respectively.

Literal tokens:
~~~~~~~~~~~~~~~

string-char  = /[^"\\]/

chrlit-char  = /[^'\\]/

escape       = /\\[\\/'"abfnrt]/ | /\\x[0-9a-fA-F]{2}/

STRING       = '"' ( string-char | escape )(*) '"'

CHAR         = '\'' ( chrlit-char | escape ){1, 8} '\''/

decimal      = /[0-9]+/

octal        = /0o[0-7]+/

binary       = /0b[0-1]+/

hex          = /0x[0-9a-fA-F]+/

INTEGER      = decimal  |
               binary   |
               octal    |
               hex

exponent     = /[eE][+-]?[0-9]+/

FLOAT        = /[0-9]+(\.[0-9]*)?/ [ exponent ]

IDENT        = /[a-zA-Z_][a-zA-Z0-9_]*/

Valid escape sequences:
~~~~~~~~~~~~~~~~~~~~~~~
The same as in C:
 - \\   ->	\
 - \/   ->	/
 - \'   ->	'
 - \"   ->	"
 - \a   ->	bell
 - \b   ->	backspace
 - \f   ->	form feed
 - \n   ->	LF
 - \r   ->	CR
 - \t   ->	TAB
 - \xHH ->	the character with code HH, where HH denotes two hexadecimal digits

Sparkling source files preferably use UTF-8 (or ASCII), but nothing else is prohibited.
(Read: please facilitate our lives and DO USE UTF-8, unless you really really can't.)
