More or less formal definition of the grammar of the Sparkling language.
Any syntactical or semantical errors in the grammar and all the deviations from
the (theoretically correct) reference implementation are unintentional.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Grammar notations:

- Specifying a production (precedence level 0, lowest):

    production = rule
    
- Listing compulsory, successive parts of a rule (precedence level 1):

    part1 part2 part3 ... partN

- Providing multiple (alternative) choices (precedence level 2):

    rule1 | rule2 | rule3 | ... | ruleN

- Quantifiers:
 
 - ? -- 0 or 1
 - * -- 0 or more
 - + -- 1 or more

- Optional language construct - zero or one occurrence (acts as grouping, too -> precedence level 3):

    [ rules... ]

- Optional language construction - zero or more occurrences (acts as grouping, too -> precedence level 3):

    { rules... }

- Grouping without side effects ("parenthesizing"; precedence level 3):

    ( rules... )

- Literal strings (terminals):

    'string'

- Other terminals:

    IN-ALL-CAPS

The language ignores whitespace between tokens (terminals). Comments are treated
as whitespace (they're ignored). Comments are enclosed between '/*' and '*/'
and they don't nest.

T h e   g r a m m a r
~~~~~~~~~~~~~~~~~~~~~

program                      =  ( statement  |  function-statement  |  const-statement )(*)

argument-declaration-list    =  ( IDENT  ( ','  IDENT )(*) )(?)

statement                    =  empty-statement              | 
                                if-statement                 | 
                                loop-statement               | 
                                return-statement             | 
                                loop-control-flow-statement  | 
                                expression-statement         | 
                                block-statement              | 
                                variable-declaration

function-statement           = 'function'  IDENT  '('  argument-declaration-list  ')'  block-statement

const-statement              =  'const'  init  ( ','  init )(*) ';'

init                         =  IDENT  '='  expression

empty-statement              =  ';'

if-statement                 =  'if'  expression  block-statement  ( 'else'  block-statement  |  if-statement  )(?)

loop-statement               =  for-statement      | 
                                foreach-statement  | 
                                while-statement    | 
                                do-while-statement

for-statement                =  'for'  expression  ';'  expression  ';'  expression  block-statement

foreach-statement            =  'foreach'  IDENT  'as'  IDENT  'in'  expression  block-statement

while-statement              =  'while'  expression  block-statement

do-while-statement           =  'do'  block-statement  'while'  expression  ';'

return-statement             =  'return'  expression(?)  ';'

block-statement              =  '{'  statement(*)  '}'

loop-control-flow-statement  =  'break'  |  'continue'  ';'

variable-declaration         =  'var'  decl  ( ','  decl )(*)  ';'

decl                         =  IDENT  ( '='  expression )(?)

expression-statement         =  expression  ';'

expression                   = assignment-expr

assignment-expr              = concat-expr [ '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '|=' | '&=' | '^=' | '<<=' | '>>=' assignment-expr ] /* right-assoc */

concat-expr                  = [cond-expr '..' ] cond-expr /* left-assoc */

cond-expr                    = logical-or-expr [ '?' expression ':' cond-expr ] /* right-assoc */

logical-or-expr              = [ logical-and-expr '||' ] logical-and-expr /* left-assoc */

logical-and-expr             = [ comparison-expr '&&' ] comparison-expr 

comparison-expr              = [ bitwise-or-expr '<' | '>' | '<=' | '>=' | '==' | '!=' ] bitwise-or-expr

bitwise-or-expr              = [ bitwise-xor-expr '|' ] bitwise-xor-expr

bitwise-xor-expr             = [ bitwise-and-expr '^' ] bitwise-and-expr

bitwise-and-expr             = [ shift-expr '&' ] shift-expr

shift-expr                   = [ additive-expr '<<' | '>>' ] additive-expr

additive-expr                = [ multplicative-expr '+' | '-' ] multiplicative-expr

multiplicative-expr          = [ prefix-expr '*' | '/' | '%' ] prefix-expr

prefix-expr                  = ( '+' | '-' | '++' | '--' | '!' | '~' | '#' | 'sizeof' | 'typeof' prefix-expr ) | postfix-expr /* right-assoc */

postfix-expr                 = term { ( '[' expression ']' ) | ( '(' [ argument-call-list ] ')' ) | '++' | '--' | ( '.' | '->' IDENT ) } /* left-assoc */

term                         =  IDENT                   | 
                                literal                 |
                                'argc'                  |
                                ( '(' expression ')' )  |
                                function-expr           |
                                array-expr

function-expr                = 'function'  '('  argument-declaration-list  ')'  block-statement

array-expr                   =  sequence-literal  |
                                dict-literal

sequence-literal             =  '@['  ( expression  ( ','  expression )(*) )(?)  ']'

dict-literal                 =  '@{'  ( key-val  ( ','  key-val )(*) )(?)  '}'

key-val                      =  expression  ':'  expression

argument-call-list           =  ( expression  ( ','  expression )(*) )(?)

literal                      =  STRING  |
                                INTEGER |
                                FLOAT   |
                                'true'  |
                                'false' |
                                'null'  |
                                'nil'

Reserved keywords
~~~~~~~~~~~~~~~~~

and         else        in        sizeof
argc        false       nil       true
as          for         not       typeof
break       foreach     null      var
continue    function    or        while
do          if          return

The 'not', 'and' and 'or' keywords are equivalent with the '!', '&&' and '||'
tokens, respectively. Furthermore, 'null' is the same as 'nil'.

Literal tokens:
~~~~~~~~~~~~~~~

char-literal  =  /'.{1,8}'/

simple-char   =  /[^"\\]/
 - note: not sure -- had to guess on this one

escape        =  /\\[\\/'"abfnrt0]/  |  /\\x[0-9a-fA-F]{2}/

STRING        =  '"'  ( simple-char  |  escape )(*)  '"'

decimal       =  /0/  |  /[1-9][0-9]*/

octal         =  /[1-7][0-7]*/  |  /0[0-7]+/

hex           =  /0x[0-9a-fA-F]+/

INTEGER       =  decimal  |
                 octal    |
                 hex

exponent      =  /[eE][+-]?\d+/

FLOAT         =  decimal  /\.\d*/  exponent(?)    |
                 decimal(?)  /\.\d+/  exponent(?)

ident-or-key  =  /[a-zA-Z_][a-zA-Z0-9_]*/
 - note: keywords take priority

Valid escape sequences:
~~~~~~~~~~~~~~~~~~~~~~~
The same as in C:
 - \\        ->        \
 - \/        ->        /
 - \'        ->        '
 - \"        ->        "
 - \a        ->        bell
 - \b        ->        backspace
 - \f        ->        form feed
 - \n        ->        LF
 - \r        ->        CR
 - \t        ->        TAB
 - \0        ->        NUL, char code 0
 - \xHH      ->        the character with code HH, where HH denotes two hexadecimal digits

Sparkling source files preferrably use UTF-8 (or ASCII), but nothing else is prohibited.
(Read: please facilitate our lives and DO USE UTF-8, unless you really really can't.)

